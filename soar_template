#!/usr/bin/env python

"""
description:
  Compare and update repo to match template.

example:
    template update
    template diff
"""

import argparse
import filecmp
import shutil
import sys
import tempfile

from os import getcwd, makedirs
from os.path import join, dirname
from urllib.parse import urljoin

import requests

from git import Repo


GITHUB_ORG_URL = 'https://raw.githubusercontent.com/techservicesillinois'
REPO_URL = f'{GITHUB_ORG_URL}/splunk-soar-template/refs/heads/main/'
TMPDIR = tempfile.TemporaryDirectory(prefix='soar.template')

# These FILES should never differ from the template!
FILES = [
    'Makefile',
#    'soar_template',  # Not in main yet!
    '.github/workflows/deploy.yml',
    'deploy.py',
    'tests/test_python_version.py',
]

TMP_FILES = {}

def github_download(path):
    '''Download files from splunk-soar-template repo to tmpdir. '''
    response = requests.get(urljoin(REPO_URL, path))

    if response.status_code == 200:
        filename = join(TMPDIR.name, path)
        directory = dirname(filename)

        makedirs(directory, exist_ok=True)
        with open(filename, 'wb') as f:
            f.write(response.content)
    else:
        breakpoint()
        raise Exception(
            f"Failed to download {path}. "
            f"Status code: {response.status_code}"
        )

    return filename

def compare_repo(args):
    '''Compare unchanging files to splunk-soar-template. '''
    differ = False

    for filename, tmpf in TMP_FILES.items():
        if not filecmp.cmp(filename, tmpf, shallow=False):
            differ = True
            print(f"{filename} differs.", file=sys.stderr)

    if differ:
        sys.exit(1)
    else:
        sys.exit(0)

def update_repo(args):
    repo = Repo(getcwd(), search_parent_directories=True)

    if repo.is_dirty():
        print("Repo is dirty. Please stash or commit changes!")
        sys.exit(2)

    user_branch = repo.active_branch  # Save active_branch; restore below.
    branch = repo.create_head("feature/update_soar_template_files")
    branch.checkout()

    for filename, tmpf in TMP_FILES.items():
        copyfile(tmpf, filename)
        repo.index.add(filename)

    if repo.is_dirty():
        repo.index.commit(
            'Update static template files from splunk-soar-template.'
        )
    else:
        print(f"{user_branch} is already up-to-date!")
        breakpoint()
        repo.git.checkout('-')
        repo.delete_head(branch)

    repo.git.checkout('-')
    sys.exit(0)


def init_parser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    subparsers = parser.add_subparsers()

    update = subparsers.add_parser('update', aliases=['up'])
    update.set_defaults(func=update_repo)

    compare = subparsers.add_parser('compare', aliases=['cmp'])
    compare.set_defaults(func=compare_repo)

    return parser

# TODO: This script needs to be run from the root of the repo!
# Add code to make sure we are there. It's easy to find just look for .git!
def main():

    parser = init_parser()
    args = parser.parse_args()

    if not '.git' in os.listdir(os.curdir):
        print("soar_template must run from repository root.")
        exit(1)

    for path in FILES:
        TMP_FILES[path] = github_download(path)

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help(sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
